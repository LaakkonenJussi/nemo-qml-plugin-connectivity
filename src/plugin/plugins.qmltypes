import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Nemo.Connectivity 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "Nemo::ConnectionHelper"
        prototype: "QObject"
        exports: ["Nemo.Connectivity/ConnectionHelper 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Offline": 0,
                "Connecting": 1,
                "Connected": 2,
                "Online": 3
            }
        }
        Property { name: "online"; type: "bool"; isReadonly: true }
        Property { name: "selectorVisible"; type: "bool"; isReadonly: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Signal { name: "networkConnectivityEstablished" }
        Signal { name: "networkConnectivityUnavailable" }
        Method { name: "attemptToConnectNetwork" }
        Method { name: "requestNetwork" }
    }
    Component {
        name: "Nemo::MobileDataConnection"
        prototype: "QObject"
        exports: ["Nemo.Connectivity/MobileDataConnection 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Unknown": -1,
                "Disconnected": 0,
                "Connecting": 1,
                "Limited": 2,
                "Online": 3
            }
        }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "autoConnect"; type: "bool" }
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "useDefaultModem"; type: "bool" }
        Property { name: "connectionName"; type: "string"; isReadonly: true }
        Property { name: "modemPath"; type: "string" }
        Property { name: "defaultDataSim"; type: "string" }
        Property { name: "presentSimCount"; type: "int"; isReadonly: true }
        Property { name: "slotCount"; type: "int"; isReadonly: true }
        Property { name: "slotIndex"; type: "int"; isReadonly: true }
        Property { name: "subscriberIdentity"; type: "string"; isReadonly: true }
        Property { name: "serviceProviderName"; type: "string"; isReadonly: true }
        Property { name: "state"; type: "string"; isReadonly: true }
        Property { name: "identifier"; type: "string"; isReadonly: true }
        Property { name: "error"; type: "string"; isReadonly: true }
        Property { name: "offlineMode"; type: "bool"; isReadonly: true }
        Property { name: "roamingAllowed"; type: "bool"; isReadonly: true }
        Property { name: "roaming"; type: "bool"; isReadonly: true }
        Property { name: "saved"; type: "bool"; isReadonly: true }
        Signal {
            name: "reportError"
            Parameter { name: "errorString"; type: "string" }
        }
        Method { name: "connect" }
        Method { name: "disconnect" }
    }
    Component {
        name: "SettingsVpnModel"
        prototype: "VpnModel"
        exports: ["Nemo.Connectivity/SettingsVpnModel 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "bestState"; type: "VpnConnection::ConnectionState"; isReadonly: true }
        Property { name: "autoConnect"; type: "bool"; isReadonly: true }
        Property { name: "orderByConnected"; type: "bool" }
        Signal {
            name: "connectionStateChanged"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "state"; type: "VpnConnection::ConnectionState" }
        }
        Method {
            name: "isDefaultDomain"
            type: "bool"
            Parameter { name: "domain"; type: "string" }
        }
        Method {
            name: "createConnection"
            Parameter { name: "properties"; type: "QVariantMap" }
        }
        Method {
            name: "modifyConnection"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "properties"; type: "QVariantMap" }
        }
        Method {
            name: "deleteConnection"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "activateConnection"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "deactivateConnection"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "connectionCredentials"
            type: "QVariantMap"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "setConnectionCredentials"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "credentials"; type: "QVariantMap" }
        }
        Method {
            name: "connectionCredentialsEnabled"
            type: "bool"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "disableConnectionCredentials"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "connectionSettings"
            type: "QVariantMap"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "processProvisioningFile"
            type: "QVariantMap"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "type"; type: "string" }
        }
        Method {
            name: "get"
            type: "VpnConnection*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "VpnModel"
        prototype: "QAbstractListModel"
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "vpnManager"; type: "VpnManager"; isReadonly: true; isPointer: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Signal {
            name: "connectedChanged"
            Parameter { name: "connected"; type: "bool" }
        }
        Method {
            name: "connectionSettings"
            type: "QVariantMap"
            Parameter { name: "path"; type: "string" }
        }
    }
}
